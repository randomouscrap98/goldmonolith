//Carlos Sanchez - 2017
//randomouscrap98@aol.com
//This script requires randomous.js

function SimpleDraw()
{
   this.maxWidth = 800; //In unit pixels (not true pixels)
   this.maxHeight = 800; //In unit pixels (not true pixels)
   this.drawer = false;
   this.canvas = false;
   this.container = false;
   this._generated = false;
   this._ctrlTool = false;
   this._eTool = false;
   this._toolRadios = false;
   this.fixToolStylingCallback = false;
}

SimpleDraw.StyleID = "simpledraw_autogeneratedsytles";
SimpleDraw.ControlsClass = "controls";
SimpleDraw.ToolboxClass = "toolbox";
SimpleDraw.ActionsClass = "actions";
SimpleDraw.LayersClass = "layers";
SimpleDraw.LayerControlsClass = "layercontrols";
SimpleDraw.CanvasClass = "draw";
SimpleDraw.CanvasContainerClass = "drawarea";
SimpleDraw.AvailableTools = 
[ 
   "⛶", "eraser",
   "✏", "freehand",
   "✒", "slow",
   "⚟", "spray",
   "▬", "line",
   "◻", "square",
   "◩", "fill",
   "◼", "clear",
   "⚗", "dropper"//,
   //"⤨", "mover"
];

SimpleDraw.prototype.GetControlsBox = function()
{
   return this.container.querySelector("." + SimpleDraw.ControlsClass); 
};

SimpleDraw.prototype.GetLayerBox = function() 
{ 
   return this.container.querySelector("." + SimpleDraw.LayersClass); 
};

SimpleDraw.prototype.CreateToolButton = function(text, tool)
{
   return this._toolRadios.CreateRadioButton(text, tool);
   /*var button = HTMLUtilities.CreateUnsubmittableButton(text); 
   button.setAttribute("data-tool", tool);
   button.className = "tool";
   button.addEventListener("click", this.SelectTool.bind(this, button));
   return button;*/
};

SimpleDraw.prototype.CreateRegularButton = function(text, onClick)
{
   var button = HTMLUtilities.CreateUnsubmittableButton(text);
   button.addEventListener("click", onClick);
   return button;
};

SimpleDraw.prototype.CreateLayer = function(layerNum)
{
   var lCanvas = document.createElement("canvas");
   lCanvas.setAttribute("data-layer", String(layerNum));
   lCanvas.width = this.canvas.width;
   lCanvas.height = this.canvas.height;
   lCanvas.addEventListener("click", this.SelectLayer.bind(this, lCanvas));
   if(layerNum === 0) CanvasUtilities.Clear(lCanvas, "#FFFFFF");
   return lCanvas;
};

SimpleDraw.prototype.SwapLayers = function(index1, index2)
{
   var firstLayer = this.drawer.buffers[index1];
   var secondLayer = this.drawer.buffers[index2];
   var canvases = this.GetLayerBox().querySelectorAll("canvas");
   this.drawer.buffers[index1] = secondLayer;
   this.drawer.buffers[index2] = firstLayer;
   HTMLUtilities.SwapElements(canvases[index1], canvases[index2]);
   this.drawer.Redraw();
};

//Select the tool represented by the given button. Also updates the UI
SimpleDraw.prototype.SelectTool = function(toolButton) 
{
   this._toolRadios.SelectRadio(toolButton);
   //console.debug("Selecting tool: ");
   //console.debug(toolButton);

   //if(TypeUtilities.IsString(toolButton))
   //   toolButton = this.container.querySelector('button[data-tool="' + toolButton + '"]');

   //var tool = toolButton.getAttribute("data-tool");

   //if(!tool)
   //{
   //   console.log("Could not select tool using this button! There is no data-tool attribute!");
   //   return;
   //}

   //this.drawer.currentTool = tool;
   //var toolbox = HTMLUtilities.FindParentWithClass(toolButton, SimpleDraw.ToolboxClass);

   //if(!toolbox)
   //{
   //   console.log("Could not find the toolbox parent while selecting a tool!");
   //   return;
   //}

   //HTMLUtilities.SimulateRadioSelect(toolButton, toolbox, "data-selected");
};

//Select the layer represented by the given layer element (a canvas). Also
//updates the UI
SimpleDraw.prototype.SelectLayer = function(layer)
{
   var layerNum = layer.getAttribute("data-layer");

   if(!layerNum)
   {
      console.log("Could not select layer using canvas! There is no data-layer attribute!");
      return;
   }

   this.drawer.currentLayer = Number(layerNum);
   var layerBox = HTMLUtilities.FindParentWithClass(layer, SimpleDraw.LayersClass);

   if(!layerBox)
   {
      console.log("Could not find the layer parent while selecting!");
      return;
   }

   HTMLUtilities.SimulateRadioSelect(layer, layerBox, "data-selected");

   var layerOpacity = document.querySelector("." + SimpleDraw.LayerControlsClass + ' input[type="range"]');
   if(layerOpacity) layerOpacity.value = this.drawer.GetCurrentLayer().opacity;
};

SimpleDraw.prototype.ScaleDrawing = function(amount)
{
   //First, get the current scaling
   var scale = CanvasUtilities.GetScaling(this.canvas);
   var screenSize = this.canvas.getBoundingClientRect();

   //Now make sure that adding the new scale amount won't push it too far.
   if(scale[0] + amount < 1) return;
   if(amount > 0)
   {
      if(screenSize.width * ((scale[0] + amount) / scale[0]) > this.maxWidth) return;
      if(screenSize.height * ((scale[1] + amount) / scale[1]) > this.maxHeight) return;
   }
   scale[0] += amount;
   scale[1] += amount;
   CanvasUtilities.SetScaling(this.canvas, scale);

   this.FixToolStyling();
};

SimpleDraw.prototype.FixToolStyling = function()
{
   if(this.fixToolStylingCallback)
      this.fixToolStylingCallback();
};

SimpleDraw.prototype.TrySetDefaultStyles = function()
{
   if(document.getElementById(SimpleDraw.StyleID))
      return;

   console.log("Setting up SimpleDraw default styles for the first time");
   var mStyle = StyleUtilities.CreateStyleElement(SimpleDraw.StyleID);
   StyleUtilities.InsertStylesAtTop([mStyle]);

   mStyle.AppendClasses(["simpledraw"], 
      ["background-color:rgba(0,0,0,0.02)"]);
   mStyle.Append(["canvas." + SimpleDraw.CanvasClass], 
      StyleUtilities.NoImageInterpolationRules());
   mStyle.AppendClasses(["simpledraw", SimpleDraw.ControlsClass, SimpleDraw.ToolboxClass,
    SimpleDraw.ActionsClass, SimpleDraw.LayersClass, "draw"], 
      ["padding:0", "margin:0", "display:inline-block"]);
   mStyle.AppendClasses([SimpleDraw.ControlsClass], 
      ["vertical-align: top", "width:120px"]);
   mStyle.AppendClasses([SimpleDraw.LayerControlsClass], 
      ["text-align: center"]);
   mStyle.AppendClasses([SimpleDraw.CanvasContainerClass], 
      ["display: inline-block"]);
   mStyle.AppendClasses([SimpleDraw.ToolboxClass], 
      ["display: inline"]);

   mStyle.Append([["." + SimpleDraw.ControlsClass, "button"]], 
      ["width:30px","height:30px","padding:0","vertical-align:top", "line-height:16px",
       "font-size:24px", "display:inline", "margin:0px"]);
   mStyle.Append([["." + SimpleDraw.ControlsClass, 'input']], 
      ["width:60px","height:30px","padding:0","vertical-align:top","font-size:20px",
       "margin:0"]);
   mStyle.Append([["." + SimpleDraw.ControlsClass, "a"]],
      ["font-size: 12px","font-family:monospace","padding:3px","display:inline-block"]);
   mStyle.Append([["." + SimpleDraw.ControlsClass, "canvas"]],
      ["width:28px","height:28px","padding:0","border:1px solid #777"]);

   mStyle.Append([["." + SimpleDraw.ToolboxClass, "button"]], 
      ["background-color:#EFEFEE","border:1px solid #888"]);

   mStyle.Append(["button[data-selected]"], 
      ["background-color: #91d3ff","border-color:#89A"]);
   mStyle.Append(["canvas[data-selected]"], 
      ["border:2px solid blue", "width:26px","height:26px"]);

   mStyle.Append([["." + SimpleDraw.LayerControlsClass, "button"]], 
      ["width:20px", "height:20px"]);
   mStyle.Append([["." + SimpleDraw.LayerControlsClass, 'input']], 
      ["width:80px","height:20px"]);
};

SimpleDraw.prototype.Generate = function(width, height, layerCount, maxUndos)
{
   if(this._generated)
   {
      console.log("Tried to generate SimpleDraw again");
      throw "This SimpleDraw is already generated!";
   }

   width = width || 200;
   height = height || 200;
   layerCount = layerCount || 4;
   maxUndos = maxUndos || 10;

   var me = this;

   //The interface is a canvas and a control area.
   var container = document.createElement("div");
   var canvas = document.createElement("canvas");
   var canvasContainer = document.createElement("div");
   var controls = document.createElement("div");
   var tools = document.createElement("div");
   var actions = document.createElement("div");
   var layerBox = document.createElement("div");
   var layerControlsBox = document.createElement("div");
   canvas.className = SimpleDraw.CanvasClass;
   canvasContainer.className = SimpleDraw.CanvasContainerClass;
   container.className = "simpledraw";
   controls.className = SimpleDraw.ControlsClass;
   actions.className = SimpleDraw.ActionsClass;
   tools.className = SimpleDraw.ToolboxClass;
   layerBox.className = SimpleDraw.LayersClass;
   layerControlsBox.className = SimpleDraw.LayerControlsClass;
   canvas.style.width = width + "px";
   canvas.style.height = height + "px";
   canvas.width = width;
   canvas.height = height;
   this.canvas = canvas;
   this.container = container;

   //The first item in the toolbox is the color selector
   var colorPicker = document.createElement("input");
   colorPicker.setAttribute("type", "color");
   colorPicker.addEventListener("change", function(e) { me.drawer.color = colorPicker.value; });

   controls.appendChild(colorPicker);

   //Immediately after the color selector is the width selector.
   var widthPicker = document.createElement("input");
   widthPicker.setAttribute("type", "number");
   widthPicker.setAttribute("min", "1");
   widthPicker.setAttribute("max", "99");
   widthPicker.addEventListener("change", function(e) { me.drawer.lineWidth = widthPicker.value; });

   controls.appendChild(widthPicker);

   //Now comes an interesting bit: the lineShape selector. This uses the radio
   //button system, but hides the radios that aren't selected.

   //var shapeContainer = document.createElement("div");
   //shapeContainer.className = "lineshapes";
   //var hardCircleButton = this.CreateRegularButton("", function() { 
   //HTMLUtilities.SimulateRadioSelect(toolButton, shapeContainer, "data-selected");

   this._toolRadios = new RadioSimulator(tools, "data-tool",
      function(toolString) {me.drawer.currentTool = toolString;});

   for(i = 0; i < SimpleDraw.AvailableTools.length; i+=2)
   {
      tools.appendChild(this.CreateToolButton(SimpleDraw.AvailableTools[i],
         SimpleDraw.AvailableTools[i + 1]));
   }

   var fullClearButton = this.CreateRegularButton("✖", function() { me.drawer.ClearLayer();});
   tools.appendChild(fullClearButton);

   var undoButton = this.CreateRegularButton("↶", function() { me.drawer.Undo(); });
   var redoButton = this.CreateRegularButton("↷", function() { me.drawer.Redo(); });
   var scaleDownButton = this.CreateRegularButton("-", function() { me.ScaleDrawing(-1);});
   var scaleUpButton = this.CreateRegularButton("+", function() { me.ScaleDrawing(1);});
   actions.appendChild(undoButton);
   actions.appendChild(redoButton);
   actions.appendChild(scaleDownButton);
   actions.appendChild(scaleUpButton);

   //The very last item in the controls is the download thingy
   var download = document.createElement("a");
   download.href = "#";
   download.innerHTML = "Download Drawing";
   download.className = "download";
   download.addEventListener("click", function(e)
   {
      download.href = me.canvas.toDataURL();
      download.download = "draw_" + (Math.floor(new Date().getTime()/1000)) + ".png";
   }, false);

   var help = document.createElement("a");
   help.href = "#";
   help.innerHTML = "Help";
   help.className = "help";
   help.addEventListener("click", function(e)
   {
      var helpText = "A simple drawing application with 4 layers and simple tools." +
         "\n\n" +
         "E : toggle eraser\n" +
         "Z : undo\n" +
         "Y : redo\n" +
         "M : increase brush\n" +
         "N : decrease brush\n" +
         "+ : expand\n" +
         "- : shrink\n" +
         "CTRL (hold) : dropper";
      alert(helpText);
   }, false);

   controls.appendChild(tools);
   controls.appendChild(actions);
   controls.appendChild(layerBox);
   controls.appendChild(download);
   controls.appendChild(help);
   canvasContainer.appendChild(canvas);
   container.appendChild(canvasContainer);
   container.appendChild(controls);

   var layers = [];
   for(i = 0; i < layerCount; i++)
   {
      var lCanvas = this.CreateLayer(i);
      layers.push(lCanvas);
      layerBox.appendChild(lCanvas);
   }

   var shiftLayerLeft = this.CreateRegularButton("<", function() 
   { 
      var currentLayer = me.drawer.CurrentLayerIndex();
      me.SwapLayers(currentLayer, (currentLayer - 1 + layerCount) % layerCount); 
   });
   var shiftLayerRight = this.CreateRegularButton(">", function() 
   { 
      var currentLayer = me.drawer.CurrentLayerIndex();
      me.SwapLayers(currentLayer, (currentLayer + 1) % layerCount); 
   });
   var layerOpacity = document.createElement("input");
   layerOpacity.setAttribute("type", "range");
   layerOpacity.setAttribute("min", "0");
   layerOpacity.setAttribute("max", "1");
   layerOpacity.setAttribute("step", "0.05");
   layerOpacity.addEventListener("input", function(e) 
   { 
      me.drawer.GetCurrentLayer().opacity = layerOpacity.value;
      me.drawer.Redraw();
   });

   layerControlsBox.appendChild(shiftLayerLeft);
   layerControlsBox.appendChild(layerOpacity);
   layerControlsBox.appendChild(shiftLayerRight);
   layerBox.appendChild(layerControlsBox);

   this.drawer = new CanvasDrawer();
   this.drawer.Attach(layers, canvas, maxUndos);
   this.drawer.OnUndoStateChange = function() 
   { 
      undoButton.disabled = !me.drawer.CanUndo();
      redoButton.disabled = !me.drawer.CanRedo();
   };
   this.drawer.OnLayerChange = function(layer)
   {
      me.SelectLayer(layers[layer]);
   };
   this.drawer.OnColorChange = function(color)
   {
      colorPicker.value = StyleUtilities.GetColor(color).ToHexString();
   };
   this.drawer.Redraw();
   this.drawer.DoUndoStateChange();

   colorPicker.value = this.drawer.color;
   widthPicker.value = this.drawer.lineWidth;
   this.SelectTool("freehand"); 
   this.SelectLayer(layers[1]);
   this.FixToolStyling();

   //Insert the default styles into the page (at the beginning, I hope) so that
   //other people can override them.
   this.TrySetDefaultStyles();

   //NOTE: These events are permanently affixed to the document since there's
   //no way to "clean up" the simple draw. This is probably a bad idea, but
   //let's hope that for now, this won't be an issue.
   this.container.addEventListener("keydown", function(e)
   {
      if(!me._ctrlTool && e.ctrlKey)
      {
         me._ctrlTool = me.drawer.currentTool;
         me.SelectTool("dropper");
      }
   });
   this.container.addEventListener("keyup", function(e)
   {
      if(me._ctrlTool)
      {
         me.SelectTool(me._ctrlTool);
         me._ctrlTool = false;
      }
   });
   this.container.addEventListener("keypress", function(e)
   {
      var ch = String.fromCharCode(e.charCode);
      console.debug("Doing simpledraw keypress: " + ch);

      if(ch === "+")
      {
         me.ScaleDrawing(1);
      }
      else if(ch === "-")
      {
         me.ScaleDrawing(-1);
      }
      else if (ch === "z")
      {
         me.drawer.Undo();
      }
      else if (ch === "y")
      {
         me.drawer.Redo();
      }
      else if (ch === "m")
      {
         if(widthPicker.value < widthPicker.max)
         {
            widthPicker.value++;
            me.drawer.lineWidth = widthPicker.value;
         }
      }
      else if (ch === "n")
      {
         if(widthPicker.value > widthPicker.min)
         {
            widthPicker.value--;
            me.drawer.lineWidth = widthPicker.value;
         }
      }
      else if(ch === "e")
      {
         if(me._eTool && me.drawer.currentTool === "eraser")
         {
            me.SelectTool(me._eTool);
            me._eTool = false;
         }
         else if(me.drawer.currentTool !== "eraser")
         {
            me._eTool = me.drawer.currentTool;
            me.SelectTool("eraser");
         }
         else
         {
            me._eTool = false;
         }
      }
      else
      {
         return;
      }

      e.preventDefault();
   });
   this.container.setAttribute("tabindex", "-1");
   window.addEventListener("resize", function() { me.FixToolStyling(); });

   this._generated = true;
   return container;
};
